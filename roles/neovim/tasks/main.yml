- name: pip2 | neovim
  shell: "{{ ansible_env.HOME }}/.local/bin/pip install --user --upgrade neovim"

- name: pip3 | neovim
  shell: >
    "{{ ansible_env.HOME }}/.local/bin/pip3 install --user --upgrade neovim"

- name: neovim ppa
  become: yes
  apt_repository: repo='ppa:neovim-ppa/unstable' state=present

- name: install neovim
  become: yes
  package: name=neovim state={{ neovim_install_state }}

- name: setup | vim-plug directory
  file: path="{{ neovim_config_dir }}/autoload" state=directory

- name: install | vim-plug
  get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: "{{ neovim_config_dir }}/autoload/plug.vim"
    force: yes

- name: Link neovim dotfiles
  file:
    src: "{{ item }}"
    dest: "{{ neovim_config_dir }}/{{ item | basename }}"
    state: link
  with_fileglob:
    - conf/*

- name: Create ftplugin dir
  file: path={{ neovim_config_dir }}/ftplugin state=directory

- name: Link ftplugin files
  file:
    src: "{{ item }}"
    dest: "{{ neovim_config_dir }}/ftplugin/{{ item | basename }}"
    state: link
  with_fileglob:
    - ftplugin/*

- name: Create colors dir
  file: path={{ neovim_config_dir }}/colors state=directory
- name: Link colorschemes
  file:
    src: "{{ item }}"
    dest: "{{ neovim_config_dir }}/colors/{{ item | basename }}"
    state: link
  with_fileglob:
    - colors/*

- name: Create UltiSnips dir
  file: path={{ neovim_config_dir }}/UltiSnips state=directory

- name: Link UltiSnips snippets
  file:
    src: "{{ item }}"
    dest: "{{ neovim_config_dir }}/UltiSnips/{{ item | basename }}"
    state: link
  with_fileglob:
    - UltiSnips/*

- name: creating project file
  copy:
    content: ""
    dest: "{{ ansible_env.HOME }}/.projects.private.vim"
    force: no

- name: install | plugins
  # opening file to load vim-go
  command: >
    nvim +silent!
    +PlugInstall!
    +UpdateRemotePlugins!
    +GoInstallBinaries!
    +GoDoctorInstall!
    +qall!
    /tmp/needed_file.go
  ignore_errors: true

- name: installing metalinter
  shell: >
    source ~/.zshrc &&
    go get -u github.com/alecthomas/gometalinter
    executable=/bin/zsh

- name: installing metalinter deps
  shell: source ~/.zshrc && gometalinter --install executable=/bin/zsh

- name: Link .gometalinter config
  file: >
    src={{item}}
    dest={{ ansible_env.HOME }}/{{ item | basename }}
    state=link
  with_fileglob:
    - .gometalinter.json

- name: installing zb
  shell: source ~/.zshrc && go get jrubin.io/zb executable=/bin/zsh

- name: installing linters via apt
  become: yes
  package: name={{ item }} state=present
  with_items:
    - shellcheck

- name: install ffi as ansible-lint dependency
  become: yes
  package: package=libffi-dev state=present

- name: installing linters via pip
  shell: "{{ ansible_env.HOME }}/.local/bin/pip install --user {{ item }}"
  with_items:
    - pyflakes
    - flake8
    - proselint
    - yamllint
    - ansible-lint
    - vim-vint
    - autopep8

- name: create yamllint dir
  file: path={{ config_dir }}/yamllint state=directory

- name: link yamllint cfg
  file:
    src: "{{ item }}"
    dest: "{{ config_dir }}/yamllint/config"
    state: link
  with_fileglob:
    - linters/yamllint

- name: installing node & npm
  shell: source ~/.zshrc && nvm install --lts executable=/bin/zsh

- name: installing linters/tools via npm
  shell: >
    source ~/.zshrc &&
    npm install -g jsonlint fixjson markdownlint-cli instant-markdown-d
    serverless neovim stylelint write-good
    tern eslint tern-lint typescript javascript-typescript-langserver
    prettierexecutable=/bin/zsh

- name: installing linters via gem
  shell: >
    "{{  ansible_env.HOME }}/.rbenv/versions/2.5.1/bin/gem install {{ item }}"
  with_items:
    - scss_lint
    - sqlint
    - observr #autotest

- name: link easy-coding-standard configs
  file:
    src: "{{ item }}"
    dest: "{{ ansible_env.HOME }}/{{ item | basename }}"
    state: link
  with_fileglob:
    - linters/.easy-coding-standard*

- name: Check if ctags is installed
  command: which ctags
  register: ctags_check
  ignore_errors: yes

- block:
    - name: clone ctags
      git: >
        repo=https://github.com/universal-ctags/ctags.git
        dest=/tmp/ctags
        accept_hostkey=yes
        force=yes
      ignore_errors: yes

    - name: prepare ctags
      shell: cd /tmp/ctags/ && ./autogen.sh && ./configure && make

    - name: install ctags
      become: yes
      shell: cd /tmp/ctags/ && make install

  when: ctags_check.stdout.find('not found') == -1

- name: Link global .tern-config
  file: >
    src={{item}}
    dest={{ ansible_env.HOME }}/{{ item | basename }}
    state=link
  with_fileglob:
    - .tern-config

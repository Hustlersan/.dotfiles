---
- name: pip2 | neovim
  shell: "{{ ansible_env.HOME }}/.local/bin/pip install --user --upgrade neovim"

- name: pip3 | neovim
  shell: "{{ ansible_env.HOME }}/.local/bin/pip3 install --user --upgrade neovim"

- name: neovim ppa
  become: yes
  apt_repository: repo='ppa:neovim-ppa/unstable' state=present

- name: install neovim
  become: yes
  package: name=neovim state={{ neovim_install_state }}

- name: setup | vim-plug directory
  file: path="{{ neovim_config_dir }}/autoload" state=directory

- name: install | vim-plug
  get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: "{{ neovim_config_dir }}/autoload/plug.vim"
    force: yes

- name: Link neovim dotfiles
  file:
    src: "{{ item }}"
    dest: "{{ neovim_config_dir }}/{{ item | basename }}"
    state: link
  with_fileglob:
    - conf/*

- name: Create ftplugin dir
  shell: mkdir -p {{ neovim_config_dir }}/ftplugin

- name: Link ftplugin files
  file:
    src: "{{ item }}"
    dest: "{{ neovim_config_dir }}/ftplugin/{{ item | basename }}"
    state: link
  with_fileglob:
    - ftplugin/*

- name: Create UltiSnips dir
  shell: mkdir -p {{ neovim_config_dir }}/UltiSnips

- name: Link UltiSnips snippets
  file:
    src: "{{ item }}"
    dest: "{{ neovim_config_dir }}/UltiSnips/{{ item | basename }}"
    state: link
  with_fileglob:
    - UltiSnips/*

- name: install | plugins
  command: "nvim +silent! +PlugInstall! +UpdateRemotePlugins! +GoInstallBinaries! +GoDoctorInstall! +qall! /tmp/needed_file.go"
  ignore_errors: true

- name: installing metalinter deps
  # opening file to load vim-go
  shell: source ~/.zshrc && gometalinter --install executable=/bin/zsh

- name: installing linters via apt
  become: yes
  apt: name={{ item }} state=present
  with_items:
    - shellcheck

- name: installing linters via pip
  shell: "{{ ansible_env.HOME }}/.local/bin/pip install --user {{ item }}"
  with_items:
    - pyflakes
    - flake8
    - proselint
    - yamllint

- name: Check if npm is installed/loaded
  command: which npm
  register: npm_check
  ignore_errors: yes

- name: installing linters via npm
  shell: "npm install -g {{ item }}"
  with_items:
    - stylelint
    - jsonlint
    - write-good
    - markdown-lint-cli
  when: npm_check.stdout.find('_zsh_nvm_load') != -1


- name: installing linters via gem
  shell: "{{ ansible_env.HOME }}/.rbenv/versions/2.5.1/bin/gem install {{ item }}"
  with_items:
    - mdl
    - scss_lint
    - sqlint
